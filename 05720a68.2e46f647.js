(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{119:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return y}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),u=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c({},t,{},e)),r},b=function(e){var t=u(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),b=u(r),p=n,y=b["".concat(l,".").concat(p)]||b[p]||m[p]||o;return r?a.a.createElement(y,c({ref:t},s,{components:r})):a.a.createElement(y,c({ref:t},s))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=p;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var s=2;s<o;s++)l[s]=r[s];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},120:function(e,t,r){"use strict";function n(e){var t,r,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(r=n(e[t]))&&(a&&(a+=" "),a+=r);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}t.a=function(){for(var e,t,r=0,a="";r<arguments.length;)(e=arguments[r++])&&(t=n(e))&&(a&&(a+=" "),a+=t);return a}},121:function(e,t,r){"use strict";var n=r(0),a=r(122);t.a=function(){const e=Object(n.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},122:function(e,t,r){"use strict";var n=r(0);const a=Object(n.createContext)(void 0);t.a=a},123:function(e,t,r){"use strict";var n=r(0),a=r.n(n),o=r(121),l=r(120),c=r(49),i=r.n(c);const s=37,u=39;t.a=function(e){const{block:t,children:r,defaultValue:c,values:b,groupId:m,className:p}=e,{tabGroupChoices:y,setTabGroupChoices:d}=Object(o.a)(),[f,O]=Object(n.useState)(c),[g,j]=Object(n.useState)(!1);if(null!=m){const e=y[m];null!=e&&e!==f&&b.some((t=>t.value===e))&&O(e)}const N=e=>{O(e),null!=m&&d(m,e)},v=[],h=e=>{e.metaKey||e.altKey||e.ctrlKey||j(!0)},T=()=>{j(!1)};return Object(n.useEffect)((()=>(window.addEventListener("keydown",h),window.addEventListener("mousedown",T),()=>{window.removeEventListener("keydown",h),window.removeEventListener("mousedown",T)})),[]),a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":t},p)},b.map((({value:e,label:t})=>a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":f===e,className:Object(l.a)("tabs__item",i.a.tabItem,{"tabs__item--active":f===e}),style:g?{}:{outline:"none"},key:e,ref:e=>v.push(e),onKeyDown:e=>{((e,t,r)=>{switch(r.keyCode){case u:((e,t)=>{const r=e.indexOf(t)+1;e[r]?e[r].focus():e[0].focus()})(e,t);break;case s:((e,t)=>{const r=e.indexOf(t)-1;e[r]?e[r].focus():e[e.length-1].focus()})(e,t)}})(v,e.target,e),h(e)},onFocus:()=>N(e),onClick:()=>{N(e),j(!1)},onPointerDown:()=>j(!1)},t)))),a.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(r).filter((e=>e.props.value===f))[0]))}},124:function(e,t,r){"use strict";var n=r(0),a=r.n(n);t.a=function(e){return a.a.createElement("div",null,e.children)}},64:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return s})),r.d(t,"rightToc",(function(){return u})),r.d(t,"default",(function(){return m}));var n=r(2),a=r(6),o=(r(0),r(119)),l=r(123),c=r(124),i={id:"query-by-primary-key",title:"Querying tables by its primary key",sidebar_label:"Query Tables By Primary Key(s)"},s={unversionedId:"queries/query-by-primary-key",id:"queries/query-by-primary-key",isDocsHomePage:!1,title:"Querying tables by its primary key",description:"For every table that has a primary key(s), GraphQLize generates a corresponding GraphQL query to enable querying the table by its primary keys.",source:"@site/docs/queries/query_by_primary_key.mdx",slug:"/queries/query-by-primary-key",permalink:"/docs/queries/query-by-primary-key",editUrl:"https://github.com/graphqlize/graphqlize.github.io/tree/source/docs/queries/query_by_primary_key.mdx",version:"current",sidebar_label:"Query Tables By Primary Key(s)",sidebar:"docs",previous:{title:"Custom Scalar Types",permalink:"/docs/graphql_schema/custom-scalar-types"},next:{title:"Querying Tables & Views",permalink:"/docs/queries/query-table-and-view"}},u=[{value:"Sample Queries",id:"sample-queries",children:[]}],b={rightToc:u};function m(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},b,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"For every table that has a primary key(s), GraphQLize generates a corresponding GraphQL query to enable querying the table by its primary keys."),Object(o.b)("p",null,"For a table like below,"),Object(o.b)(l.a,{defaultValue:"postgres",values:[{label:"Postgres",value:"postgres"},{label:"MySQL",value:"mysql"}],mdxType:"Tabs"},Object(o.b)(c.a,{value:"postgres",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE actor (\n  actor_id SERIAL PRIMARY KEY,\n  first_name character varying(45) NOT NULL,\n  last_name character varying(45) NOT NULL\n);\n"))),Object(o.b)(c.a,{value:"mysql",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE actor (\n  actor_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,\n  first_name VARCHAR(45) NOT NULL,\n  last_name VARCHAR(45) NOT NULL,\n  PRIMARY KEY  (actor_id)\n)\n")))),Object(o.b)("p",null,"GraphQLize generates the following query"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"type QueryRoot {\n  actorByActorId(actorId: Int!): Actor\n  # ...\n}\n\nschema {\n  query: QueryRoot\n}\n")),Object(o.b)("p",null,"The query name ",Object(o.b)("inlineCode",{parentName:"p"},"actorByActorId")," is created using the following convention. "),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"{camel-case(table-name)}"),Object(o.b)("em",{parentName:"p"},"By"),Object(o.b)("inlineCode",{parentName:"p"},"{pascal-case(primary-key-column-name)}")),Object(o.b)("p",null,"If a table has multiple primary keys like below"),Object(o.b)(l.a,{defaultValue:"postgres",values:[{label:"Postgres",value:"postgres"},{label:"MySQL",value:"mysql"}],mdxType:"Tabs"},Object(o.b)(c.a,{value:"postgres",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE film_actor (\n  actor_id smallint REFERENCES actor(actor_id),\n  film_id smallint REFERENCES film(film_id)\n  CONSTRAINT film_actor_pkey PRIMARY KEY (actor_id, film_id)\n);\n"))),Object(o.b)(c.a,{value:"mysql",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE film_actor (\n  actor_id SMALLINT UNSIGNED NOT NULL,\n  film_id SMALLINT UNSIGNED NOT NULL,\n  PRIMARY KEY (actor_id,film_id)\n);\n")))),Object(o.b)("p",null,"GraphQLize generates the following query"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"type QueryRoot {\n  filmActorByActorIdAndFilmId(actorId: Int!, filmId: Int!): FilmActor \n  # ...\n}\n")),Object(o.b)("p",null,"The convention followed here for generating the query name is same as above except that primary key columns are sorted by their names and concatenated with ",Object(o.b)("inlineCode",{parentName:"p"},"And"),". "),Object(o.b)("h2",{id:"sample-queries"},"Sample Queries"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"# Table Name: employee \n# Primary Key Column Name: id\n\nquery {\n  employeeById(id: 1) {\n    # Column Name: `first_name`\n    firstName\n    # Column Name: `last_name`\n    lastName\n    # Column Name: `employee_reports_to_id`\n    employeeReportsToId\n  }\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"\n# Table Name: `country` \n# Primary Key Column Name: `country_id`\n\nquery {\n  countryByCountryId(countryId: 1) {\n    # Column Name: `country`\n    country\n  }\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),'# Query by UUID primary key is also supported.\n# Limited to Postgres alone.\n\n# Table Name: `customer` \n# Primary Key Column Name: `id` (of type `UUID`)\n\nquery {\n  customerById(id: "847f09a7-39d1-4021-b43d-18ceb7ada8f6") {\n    # Column Name: `id`\n    id\n    # Column Name: `first_name`\n    firstName\n  }\n}\n')))}m.isMDXComponent=!0}}]);