(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{108:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return c})),t.d(a,"metadata",(function(){return l})),t.d(a,"rightToc",(function(){return p})),t.d(a,"default",(function(){return d}));var n=t(2),r=t(6),o=(t(0),t(119)),i=t(123),s=t(124),c={id:"scalatra",title:"Scalatra",sidebar_label:"Scalatra"},l={unversionedId:"getting_started/scala/scalatra",id:"getting_started/scala/scalatra",isDocsHomePage:!1,title:"Scalatra",description:"One of the core design goals of GraphQLize is not to tie to any web development framework and remain as a drop-in JVM library.",source:"@site/docs/getting_started/scala/scalatra.mdx",slug:"/getting_started/scala/scalatra",permalink:"/docs/getting_started/scala/scalatra",editUrl:"https://github.com/graphqlize/graphqlize.github.io/tree/source/docs/getting_started/scala/scalatra.mdx",version:"current",sidebar_label:"Scalatra",sidebar:"docs",previous:{title:"Vanilla Clojure",permalink:"/docs/getting_started/clojure/vanilla"},next:{title:"Types & Fields",permalink:"/docs/graphql_schema/types-and-fields"}},p=[{value:"Adding Dependencies",id:"adding-dependencies",children:[]},{value:"Initializing GraphQLizeResolver",id:"initializing-graphqlizeresolver",children:[{value:"Configuring DataSource",id:"configuring-datasource",children:[]}]},{value:"Adding GraphQL Endpoint",id:"adding-graphql-endpoint",children:[{value:"Test Drive",id:"test-drive",children:[]}]},{value:"GraphQL Playground and Voyager",id:"graphql-playground-and-voyager",children:[]},{value:"Next Steps",id:"next-steps",children:[]}],b={rightToc:p};function d(e){var a=e.components,c=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},b,c,{components:a,mdxType:"MDXLayout"}),Object(o.b)("p",null,"One of the core design goals of GraphQLize is not to tie to any web development framework and remain as a drop-in JVM library."),Object(o.b)("p",null,"Getting started with GraphQLize in ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://scalatra.org/"}),"Scalatra")," is simple and involves only a few steps."),Object(o.b)("h2",{id:"adding-dependencies"},"Adding Dependencies"),Object(o.b)("p",null,"Let's start by creating new ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://scalatra.org/getting-started/first-project.html"}),"Scalatra project")," and then add the ",Object(o.b)("inlineCode",{parentName:"p"},"graphqlize-java")," & other required dependencies in ",Object(o.b)("em",{parentName:"p"},"build.sbt")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala",metastring:"{2,14}","{2,14}":!0}),'// ...\nresolvers += "Clojars" at "https://clojars.org/repo"\n\nlibraryDependencies ++= Seq(\n  // ...\n  "org.scalatra" %% "scalatra-json" % ScalatraVersion,\n  "org.json4s"   %% "json4s-jackson" % "3.6.7",\n  // For Postgres\n  "org.postgresql" % "postgresql" % "42.2.10",\n  // For Mysql\n  "mysql" % "mysql-connector-java" % "8.0.19",\n  "com.zaxxer" % "HikariCP" % "3.4.2",\n\n  "org.graphqlize" % "graphqlize-java" % "0.1.0-alpha20"\n)\n')),Object(o.b)("h2",{id:"initializing-graphqlizeresolver"},"Initializing GraphQLizeResolver"),Object(o.b)("p",null,"To initialize ",Object(o.b)("inlineCode",{parentName:"p"},"GraphQLizeResolver"),", we need a ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.oracle.com/javase/7/docs/api/javax/sql/DataSource.html"}),"DataSource"),"."),Object(o.b)("h3",{id:"configuring-datasource"},"Configuring DataSource"),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Make sure you are changing the below values to refer your database connection. The below example assumes that you are using the ",Object(o.b)("em",{parentName:"p"},"sakila")," database created from this ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/jOOQ/jOOQ/tree/master/jOOQ-examples/Sakila"}),"JOOQ's example repository"),".  "))),Object(o.b)(i.a,{defaultValue:"postgres",values:[{label:"Postgres",value:"postgres"},{label:"MySQL",value:"mysql"}],mdxType:"Tabs"},Object(o.b)(s.a,{value:"postgres",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala",metastring:"{16}","{16}":!0}),'// ScalatraBootstrap.kt\n// ...\nimport com.zaxxer.hikari._\nimport org.graphqlize.java.GraphQLizeResolver\n\nclass ScalatraBootstrap extends LifeCycle {\n  def dataSource: HikariDataSource = {\n    val config = new HikariConfig\n     config.setJdbcUrl("jdbc:postgresql://localhost:5432/sakila")\n     config.setUsername("postgres")\n     config.setPassword("postgres")\n    new HikariDataSource(config)\n  }\n\n  override def init(context: ServletContext) {\n    val graphqlResolver = new GraphQLizeResolver(dataSource)\n    // ...\n  }\n}\n'))),Object(o.b)(s.a,{value:"mysql",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala",metastring:"{16}","{16}":!0}),'// ScalatraBootstrap.kt\n// ...\nimport com.zaxxer.hikari._\nimport org.graphqlize.java.GraphQLizeResolver\n\nclass ScalatraBootstrap extends LifeCycle {\n  def dataSource: HikariDataSource = {\n    val config = new HikariConfig\n    config.setJdbcUrl("jdbc:mysql://localhost:3306/sakila")\n    config.setUsername("root")\n    config.setPassword("mysql123")\n    new HikariDataSource(config)\n  }\n\n  override def init(context: ServletContext) {\n    val graphqlResolver = new GraphQLizeResolver(dataSource)\n    // ...\n  }\n}\n')))),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Currently, it takes around 8 to 12 seconds to initialize. I am planning to ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/graphqlize/graphqlize/issues/48"}),"work on it")," in a future release."))),Object(o.b)("h2",{id:"adding-graphql-endpoint"},"Adding GraphQL Endpoint"),Object(o.b)("p",null,"The next step is adding an API to expose the GraphQL endpoint. To do it, first, add a data class to model the incoming GraphQL request."),Object(o.b)("p",null,"Create a new file ",Object(o.b)("em",{parentName:"p"},"GraphQLizeScalatraServlet.scala")," and add the following"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala"}),"package org.graphqlize.scala\n\ncase class GraphQLRequest(query : String, variables : Option[Map[String, Object]])\n")),Object(o.b)("p",null,"Then add a new router ",Object(o.b)("inlineCode",{parentName:"p"},"/graphql")," and deserialize the request to this ",Object(o.b)("inlineCode",{parentName:"p"},"GraphQLRequest")," class using Jackson. Finally, get the query & the variables from the request and invoke the ",Object(o.b)("inlineCode",{parentName:"p"},"resolve")," method on the initialized instance of ",Object(o.b)("inlineCode",{parentName:"p"},"GraphQLizeResolver"),". It returns the ",Object(o.b)("inlineCode",{parentName:"p"},"result")," as stringified JSON"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala",metastring:"{3,17-21}","{3,17-21}":!0}),'// imports are ignored for brevity \n\nclass GraphQLizeScalatraServlet(graphQLResolver : GraphQLResolver) \n  extends ScalatraServlet with JacksonJsonSupport {\n\n  protected implicit val jsonFormats: Formats = DefaultFormats\n\n  before() {\n    contentType = formats("json")\n  }\n\n  post("/graphql") {\n    val gqlReq = \n      JsonMethodsExt.parse(compact(render(parsedBody)))\n                    .extract[GraphQLRequest]\n\n    if (gqlReq.variables.isDefined)\n      graphQLResolver\n        .resolve(gqlReq.query, gqlReq.variables.get.asJava)\n    else\n      graphQLResolver.resolve(gqlReq.query)\n  }\n}\n\n// Patch: https://github.com/json4s/json4s/issues/329\nobject JsonMethodsExt extends org.json4s.jackson.JsonMethods {\n  mapper.disable(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)\n  def parse(in: JsonInput): JValue = super.parse(in, useBigIntForLong = false)\n  def parseOpt(in: JsonInput): Option[JValue] = super.parseOpt(in, useBigIntForLong = false)\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala",metastring:"{7}","{7}":!0}),'// ScalatraBootstrap.scala\nclass ScalatraBootstrap extends LifeCycle {\n  // ...\n\n  override def init(context: ServletContext) {\n    val graphqlResolver = new GraphQLizeResolver(dataSource)\n    context.mount(new GraphQLizeScalatraServlet(graphqlResolver), "/*")\n  }\n}\n')),Object(o.b)("h3",{id:"test-drive"},"Test Drive"),Object(o.b)("p",null,"To do a test drive of this implementation, start the server and hit the endpoint via curl."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),'> curl -X POST \\\n  --data \'{"query": "query { actorByActorId(actorId: 1){firstName}}"}\' \\\n  -H "Content-Type: application/json" \\\n  http://localhost:8080/graphql\n')),Object(o.b)("p",null,"You'll get a response like below."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "data": {\n    "actorByActorId": {\n      "firstName": "PENELOPE"\n    }\n  }\n}\n')),Object(o.b)("h2",{id:"graphql-playground-and-voyager"},"GraphQL Playground and Voyager"),Object(o.b)("p",null,"With the GraphQL endpoint up and running, the next step is introspecting the GraphQL schema and try out some more queries. "),Object(o.b)("p",null,"To introspect, we are going to make use of ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/APIs-guru/graphql-voyager"}),"Voyager"),", a tool to visualize GraphQL API as an interactive graph. Adding it to our project is easy thanks to ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://scalatra.org/getting-started/project-structure.html"}),"static content serve capability")," of Scalatra. "),Object(o.b)("p",null,"All you need to do is download this ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/graphqlize/graphqlize-demo/blob/master/scala/scalatra-graphqlize-demo-web-app/src/main/webapp/voyager.html"}),"voyager.html")," file and put it under the ",Object(o.b)("em",{parentName:"p"},"src/main/webapp")," directory. "),Object(o.b)("p",null,"When you restart the server, the Voyager will be available at ",Object(o.b)("em",{parentName:"p"},"http://localhost:8080/voyager.html"),". A sample output would look like ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.graphqlize.org/html/sakila-voyager.html"}),"this"),"."),Object(o.b)("p",null,"Then to interact with the GraphQL API, let's add the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/prisma-labs/graphql-playground"}),"GraphQL Playground"),". Like Voyager, download this ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/graphqlize/graphqlize-demo/blob/master/scala/scalatra-graphqlize-demo-web-app/src/main/webapp/playground.html"}),"playground.html")," file and put in the ",Object(o.b)("em",{parentName:"p"},"src/main/webapp")," directory. "),Object(o.b)("p",null,"This GraphQL playground will be available at ",Object(o.b)("em",{parentName:"p"},"http://localhost:8080/playground.html")," after server restart. "),Object(o.b)("p",null,Object(o.b)("img",{src:t(128).default})),Object(o.b)("h2",{id:"next-steps"},"Next Steps"),Object(o.b)("p",null,"Congrats! You are on course to build impressive applications using GraphQLize in less time. To save yourself some more time, do refer ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/graphql_schema/types-and-fields"}),"this documentation")," to know more about how GraphQLize generates the GraphQL schema and the queries. "),Object(o.b)("p",null,"The sample code is available in ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/graphqlize/graphqlize-demo/tree/master/scala/scalatra-graphqlize-demo-web-app"}),"this GitHub Repository"),"."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"You can also customize certain default behaviours of GraphQLize in future releases."))))}d.isMDXComponent=!0},119:function(e,a,t){"use strict";t.d(a,"a",(function(){return b})),t.d(a,"b",(function(){return m}));var n=t(0),r=t.n(n);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function c(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),p=function(e){var a=r.a.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):s({},a,{},e)),t},b=function(e){var a=p(e.components);return r.a.createElement(l.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},u=Object(n.forwardRef)((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(t),u=n,m=b["".concat(i,".").concat(u)]||b[u]||d[u]||o;return t?r.a.createElement(m,s({ref:a},l,{components:t})):r.a.createElement(m,s({ref:a},l))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var c in a)hasOwnProperty.call(a,c)&&(s[c]=a[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},120:function(e,a,t){"use strict";function n(e){var a,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(a=0;a<e.length;a++)e[a]&&(t=n(e[a]))&&(r&&(r+=" "),r+=t);else for(a in e)e[a]&&(r&&(r+=" "),r+=a);return r}a.a=function(){for(var e,a,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(a=n(e))&&(r&&(r+=" "),r+=a);return r}},121:function(e,a,t){"use strict";var n=t(0),r=t(122);a.a=function(){const e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},122:function(e,a,t){"use strict";var n=t(0);const r=Object(n.createContext)(void 0);a.a=r},123:function(e,a,t){"use strict";var n=t(0),r=t.n(n),o=t(121),i=t(120),s=t(49),c=t.n(s);const l=37,p=39;a.a=function(e){const{block:a,children:t,defaultValue:s,values:b,groupId:d,className:u}=e,{tabGroupChoices:m,setTabGroupChoices:h}=Object(o.a)(),[g,j]=Object(n.useState)(s),[O,v]=Object(n.useState)(!1);if(null!=d){const e=m[d];null!=e&&e!==g&&b.some((a=>a.value===e))&&j(e)}const f=e=>{j(e),null!=d&&h(d,e)},y=[],w=e=>{e.metaKey||e.altKey||e.ctrlKey||v(!0)},N=()=>{v(!1)};return Object(n.useEffect)((()=>(window.addEventListener("keydown",w),window.addEventListener("mousedown",N),()=>{window.removeEventListener("keydown",w),window.removeEventListener("mousedown",N)})),[]),r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":a},u)},b.map((({value:e,label:a})=>r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===e,className:Object(i.a)("tabs__item",c.a.tabItem,{"tabs__item--active":g===e}),style:O?{}:{outline:"none"},key:e,ref:e=>y.push(e),onKeyDown:e=>{((e,a,t)=>{switch(t.keyCode){case p:((e,a)=>{const t=e.indexOf(a)+1;e[t]?e[t].focus():e[0].focus()})(e,a);break;case l:((e,a)=>{const t=e.indexOf(a)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,a)}})(y,e.target,e),w(e)},onFocus:()=>f(e),onClick:()=>{f(e),v(!1)},onPointerDown:()=>v(!1)},a)))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(t).filter((e=>e.props.value===g))[0]))}},124:function(e,a,t){"use strict";var n=t(0),r=t.n(n);a.a=function(e){return r.a.createElement("div",null,e.children)}},128:function(e,a,t){"use strict";t.r(a),a.default=t.p+"assets/images/graphql-playground-3ed9e7bc5cee10c4e89be27df856dbb8.png"}}]);