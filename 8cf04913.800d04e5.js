(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{119:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return O}));var n=a(0),r=a.n(n);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),d=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l({},t,{},e)),a},p=function(e){var t=d(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,b=e.originalType,c=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),p=d(a),s=n,O=p["".concat(c,".").concat(s)]||p[s]||m[s]||b;return a?r.a.createElement(O,l({ref:t},o,{components:a})):r.a.createElement(O,l({ref:t},o))}));function O(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,c=new Array(b);c[0]=s;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var o=2;o<b;o++)c[o]=a[o];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}s.displayName="MDXCreateElement"},120:function(e,t,a){"use strict";function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}},121:function(e,t,a){"use strict";var n=a(0),r=a(122);t.a=function(){const e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},122:function(e,t,a){"use strict";var n=a(0);const r=Object(n.createContext)(void 0);t.a=r},123:function(e,t,a){"use strict";var n=a(0),r=a.n(n),b=a(121),c=a(120),l=a(49),i=a.n(l);const o=37,d=39;t.a=function(e){const{block:t,children:a,defaultValue:l,values:p,groupId:m,className:s}=e,{tabGroupChoices:O,setTabGroupChoices:j}=Object(b.a)(),[N,u]=Object(n.useState)(l),[h,g]=Object(n.useState)(!1);if(null!=m){const e=O[m];null!=e&&e!==N&&p.some((t=>t.value===e))&&u(e)}const y=e=>{u(e),null!=m&&j(m,e)},f=[],v=e=>{e.metaKey||e.altKey||e.ctrlKey||g(!0)},C=()=>{g(!1)};return Object(n.useEffect)((()=>(window.addEventListener("keydown",v),window.addEventListener("mousedown",C),()=>{window.removeEventListener("keydown",v),window.removeEventListener("mousedown",C)})),[]),r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":t},s)},p.map((({value:e,label:t})=>r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":N===e,className:Object(c.a)("tabs__item",i.a.tabItem,{"tabs__item--active":N===e}),style:h?{}:{outline:"none"},key:e,ref:e=>f.push(e),onKeyDown:e=>{((e,t,a)=>{switch(a.keyCode){case d:((e,t)=>{const a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()})(e,t);break;case o:((e,t)=>{const a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()})(e,t)}})(f,e.target,e),v(e)},onFocus:()=>y(e),onClick:()=>{y(e),g(!1)},onPointerDown:()=>g(!1)},t)))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(a).filter((e=>e.props.value===N))[0]))}},124:function(e,t,a){"use strict";var n=a(0),r=a.n(n);t.a=function(e){return r.a.createElement("div",null,e.children)}},93:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return d})),a.d(t,"default",(function(){return m}));var n=a(2),r=a(6),b=(a(0),a(119)),c=a(123),l=a(124),i={id:"types-and-fields",title:"Types & Fields",sidebar_label:"Types & Fields"},o={unversionedId:"graphql_schema/types-and-fields",id:"graphql_schema/types-and-fields",isDocsHomePage:!1,title:"Types & Fields",description:"The crux of GraphQLize is generating the GraphQL types and queries by making use of JDBC metadata. This page documents the conventions and assumptions behind this automatic generation.",source:"@site/docs/graphql_schema/types_and_fields.mdx",slug:"/graphql_schema/types-and-fields",permalink:"/docs/graphql_schema/types-and-fields",editUrl:"https://github.com/graphqlize/graphqlize.github.io/tree/source/docs/graphql_schema/types_and_fields.mdx",version:"current",sidebar_label:"Types & Fields",sidebar:"docs",previous:{title:"Scalatra",permalink:"/docs/getting_started/scala/scalatra"},next:{title:"Relationships",permalink:"/docs/graphql_schema/relationships"}},d=[{value:"Type name",id:"type-name",children:[]},{value:"Field name",id:"field-name",children:[]},{value:"Field type",id:"field-type",children:[]}],p={rightToc:d};function m(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("p",null,"The crux of GraphQLize is generating the GraphQL types and queries by making use of ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html"}),"JDBC metadata"),". This page documents the conventions and assumptions behind this automatic generation."),Object(b.b)("h2",{id:"type-name"},"Type name"),Object(b.b)("p",null,"For every tables and views in the database, GraphQLize generates a GraphQL type. The name of the GraphQL type is the singularized, ",Object(b.b)("em",{parentName:"p"},"PascalCase")," version of the corresponding table or view name."),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Table/View Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"GraphQL Type Name"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"actor"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Actor")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"film_actor"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"FilmActor")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"comments"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Comment")))),Object(b.b)("p",null,"GraphQlize supports Postgres ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.postgresql.org/docs/current/ddl-schemas.html"}),"schema"),". If the schema in question is not a default schema (",Object(b.b)("inlineCode",{parentName:"p"},"public"),"), then it will be used as a prefix in the GraphQL type name."),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Schema Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Table/View Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"GraphQL Type Name"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"person"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"state_province"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"PersonStateProvince")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"human_resources"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"employee"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"HumanResourcesEmployee")))),Object(b.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(b.b)("h5",{parentName:"div"},Object(b.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(b.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(b.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(b.b)("p",{parentName:"div"},"The table name is alone singularized and not the schema name."))),Object(b.b)("h2",{id:"field-name"},"Field name"),Object(b.b)("p",null,"The Field names of a generated GraphQL Type represent the column names of the corresponding database table or view. GraphQLize generates the field name by converting the column name to its ",Object(b.b)("em",{parentName:"p"},"camelCase")," version."),Object(b.b)("p",null,"For a table like below,"),Object(b.b)(c.a,{defaultValue:"postgres",values:[{label:"Postgres",value:"postgres"},{label:"MySQL",value:"mysql"}],mdxType:"Tabs"},Object(b.b)(l.a,{value:"postgres",mdxType:"TabItem"},Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE actor (\n  actor_id SERIAL PRIMARY KEY,\n  first_name character varying(45) NOT NULL,\n  last_name character varying(45) NOT NULL\n);\n"))),Object(b.b)(l.a,{value:"mysql",mdxType:"TabItem"},Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE actor (\n  actor_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,\n  first_name VARCHAR(45) NOT NULL,\n  last_name VARCHAR(45) NOT NULL,\n  PRIMARY KEY  (actor_id)\n)\n")))),Object(b.b)("p",null,"GraphQLize generates a GraphQL type as "),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"type Actor {\n  actorId: Int!\n  firstName: String!\n  lastName: String!\n}\n")),Object(b.b)("h2",{id:"field-type"},"Field type"),Object(b.b)("p",null,"GraphQLize supports the ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://graphql.org/learn/schema/#scalar-types"}),"standard GraphQL scalar types")," and ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/graphql_schema/custom-scalar-types"}),"some custom scalar types"),"."),Object(b.b)("p",null,"During the schema generation, GraphQLize checks the column's database type and convert it to a GraphQL scalar type. Refer the table below for the type conversion mapping."),Object(b.b)(c.a,{defaultValue:"postgres",values:[{label:"Postgres",value:"postgres"},{label:"MySQL",value:"mysql"}],mdxType:"Tabs"},Object(b.b)(l.a,{value:"postgres",mdxType:"TabItem"},Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"GraphQL Scalar Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Data Type(s)"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Int"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"integer"),", ",Object(b.b)("inlineCode",{parentName:"td"},"int"),", ",Object(b.b)("inlineCode",{parentName:"td"},"int2"),"  ",Object(b.b)("inlineCode",{parentName:"td"},"int4"),", ",Object(b.b)("inlineCode",{parentName:"td"},"smallint"),", ",Object(b.b)("inlineCode",{parentName:"td"},"smallserial"),", ",Object(b.b)("inlineCode",{parentName:"td"},"serial"),", ",Object(b.b)("inlineCode",{parentName:"td"},"serial2"),", ",Object(b.b)("inlineCode",{parentName:"td"},"serial4"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Float"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"real"),", ",Object(b.b)("inlineCode",{parentName:"td"},"float4"),", ",Object(b.b)("inlineCode",{parentName:"td"},"float8"),", ",Object(b.b)("inlineCode",{parentName:"td"},"double precision"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"String"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"bit"),", ",Object(b.b)("inlineCode",{parentName:"td"},"bit varying"),", ",Object(b.b)("inlineCode",{parentName:"td"},"char"),", ",Object(b.b)("inlineCode",{parentName:"td"},"character varying"),", ",Object(b.b)("inlineCode",{parentName:"td"},"varchar"),", ",Object(b.b)("inlineCode",{parentName:"td"},"citext"),", ",Object(b.b)("inlineCode",{parentName:"td"},"bpchar"),", ",Object(b.b)("inlineCode",{parentName:"td"},"macaddr8"),", ",Object(b.b)("inlineCode",{parentName:"td"},"text"),", ",Object(b.b)("inlineCode",{parentName:"td"},"money"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Boolean"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"boolean"),", ",Object(b.b)("inlineCode",{parentName:"td"},"bool"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/graphql_schema/custom-scalar-types#uuid"}),"UUID")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"uuid"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/graphql_schema/custom-scalar-types#long"}),"Long")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"bigint"),",",Object(b.b)("inlineCode",{parentName:"td"},"int8"),",",Object(b.b)("inlineCode",{parentName:"td"},"bigserial"),",",Object(b.b)("inlineCode",{parentName:"td"},"serial8"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/graphql_schema/custom-scalar-types#bigdecimal"}),"BigDecimal")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"numeric"),",",Object(b.b)("inlineCode",{parentName:"td"},"decimal"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/graphql_schema/custom-scalar-types#date"}),"Date")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"date"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/graphql_schema/custom-scalar-types#time"}),"Time")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"time"),", ",Object(b.b)("inlineCode",{parentName:"td"},"time without time zone"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/graphql_schema/custom-scalar-types#timewithtimezone"}),"TimeWithTimeZone")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"timetz"),", ",Object(b.b)("inlineCode",{parentName:"td"},"time with time zone"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/graphql_schema/custom-scalar-types#datetime"}),"DateTime")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"timestamp"),",",Object(b.b)("inlineCode",{parentName:"td"},"timestamp without time zone"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/graphql_schema/custom-scalar-types#datetimwithtimezone"}),"DateTimeWithTimeZone")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"timestamptz"),",",Object(b.b)("inlineCode",{parentName:"td"},"timestamp with time zone")))))),Object(b.b)(l.a,{value:"mysql",mdxType:"TabItem"},Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"GraphQL Scalar Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Data Type(s)"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Int"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"SMALLINT"),", ",Object(b.b)("inlineCode",{parentName:"td"},"MEDIUMINT"),", ",Object(b.b)("inlineCode",{parentName:"td"},"INT"),", ",Object(b.b)("inlineCode",{parentName:"td"},"TINYINT UNSIGNED"),", ",Object(b.b)("inlineCode",{parentName:"td"},"SMALLINT UNSIGNED"),", ",Object(b.b)("inlineCode",{parentName:"td"},"MEDIUMINT UNSIGNED"),", ",Object(b.b)("inlineCode",{parentName:"td"},"YEAR"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Float"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"REAL"),", ",Object(b.b)("inlineCode",{parentName:"td"},"FLOAT"),", ",Object(b.b)("inlineCode",{parentName:"td"},"DOUBLE"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"String"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"CHAR"),", ",Object(b.b)("inlineCode",{parentName:"td"},"VARCHAR"),", ",Object(b.b)("inlineCode",{parentName:"td"},"TINYTEXT"),", ",Object(b.b)("inlineCode",{parentName:"td"},"TEXT"),", ",Object(b.b)("inlineCode",{parentName:"td"},"MEDIUMTEXT"),", ",Object(b.b)("inlineCode",{parentName:"td"},"LONGTEXT"),", ",Object(b.b)("inlineCode",{parentName:"td"},"ENUM"),", ",Object(b.b)("inlineCode",{parentName:"td"},"SET"),", ",Object(b.b)("inlineCode",{parentName:"td"},"BINARY"),", ",Object(b.b)("inlineCode",{parentName:"td"},"VARBINARY"),", ",Object(b.b)("inlineCode",{parentName:"td"},"TINYBLOB,")," ",Object(b.b)("inlineCode",{parentName:"td"},"BLOB"),", ",Object(b.b)("inlineCode",{parentName:"td"},"LONGBLOB"),", ",Object(b.b)("inlineCode",{parentName:"td"},"BIT"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Boolean"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"BIT(1)"),", ",Object(b.b)("inlineCode",{parentName:"td"},"TINYINT(1)"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"UUID"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"https://github.com/graphqlize/graphqlize/issues/11"}),"Yet to support"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/graphql_schema/custom-scalar-types#long"}),"Long")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"INT UNSIGNED"),",",Object(b.b)("inlineCode",{parentName:"td"},"BIGINT"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/graphql_schema/custom-scalar-types#bigdecimal"}),"BigDecimal")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"DECIMAL"),", ",Object(b.b)("inlineCode",{parentName:"td"},"NUMERIC"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/graphql_schema/custom-scalar-types#biginteger"}),"BigInteger")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"BIGINT UNSIGNED"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/graphql_schema/custom-scalar-types#date"}),"Date")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"date"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/graphql_schema/custom-scalar-types#time"}),"Time")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"time"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/graphql_schema/custom-scalar-types#datetime"}),"DateTime")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"DATETIME"),", ",Object(b.b)("inlineCode",{parentName:"td"},"TIMESTAMP"))))))),Object(b.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(b.b)("h5",{parentName:"div"},Object(b.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(b.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(b.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(b.b)("p",{parentName:"div"},"If a column's database type is not available in the above table, GraphQLize assumes ",Object(b.b)("inlineCode",{parentName:"p"},"String")," as the default scalar data type for the corresponding GraphQL field."))))}m.isMDXComponent=!0}}]);